%{
    #include "SemanticAnalyzer.h"
    #include "hw3_output.hpp"
    #include <iostream>
    using namespace output;
    void yyerror(char const*);
%}

%token    VOID
%token    INT
%token    BYTE
%token    B
%token    BOOL
%token    CONST
%token    TRUE
%token    FALSE
%token    RETURN
%token    WHILE
%token    BREAK
%token    CONTINUE
%token    SC
%token    COMMA
%token    IF
%token    ID
%token    NUM
%token    STRING
%right    ASSIGN
%left     OR
%left     AND
%left     EQUALITY
%nonassoc RELATION
%left     BINADD
%left     BINMUL
%right    NOT
%left     LBRACE
%left     RBRACE
%left     LPAREN
%left     RPAREN
%nonassoc ELSE

%%

Program : Funcs                                                      { $$ = new Program>(); check_for_main_correctness(); };
Funcs :                                                              { $$ = new Funcs(); };
Funcs : FuncDecl Funcs                                               { $$ = new Funcs>(); };
FuncDecl : RetType ID M_NEW_SCOPE LPAREN Formals RPAREN LBRACE Statements RBRACE
{ 
    $$ =  new FuncDecl($1, $2, $5);
    destroy_current_scope();
};
RetType : Type                                                       { $$ = new RetType($1); };
RetType : VOID                                                       { $$ = new RetType($1); };
Formals :                                                            { $$ = new Formals(); };
Formals : FormalsList                                                { $$ = new Formals($1); };
FormalsList : FormalDecl                                             { $$ = new FormalsList($1); };
FormalsList : FormalDecl COMMA FormalsList                           { $$ = new FormalsList($1, $3); };
FormalDecl : TypeAnnotation Type ID                                  { $$ = new FormalDecl($2, $3, $1); };
Statements : Statement                                               { $$ = new Statements($1); };
Statements : Statements Statement                                    { $$ = new Statements$1,$2); };
Statement : LBRACE M_NEW_SCOPE Statements RBRACE                     { $$ = new Statement($3; destroy_current_scope(); };
Statement : TypeAnnotation Type ID SC                                { $$ = new Statement($2, $3, $1); };
Statement : TypeAnnotation Type ID ASSIGN Exp SC                     { $$ = new Statement($2, $3, $5, $1); };
Statement : ID ASSIGN Exp SC                                         { $$ = new Statement($1, $3); };
Statement : Call SC                                                  { $$ = new Statement($1); };
Statement : RETURN SC                                                { $$ = new Statement(); };
Statement : RETURN Exp SC                                            { $$ = new Statement($2); };
Statement : IF LPAREN Exp RPAREN M_NEW_SCOPE Statement               { $$ = new Statement("", $3); destroy_current_scope(); };
Statement : IF LPAREN Exp RPAREN M_NEW_SCOPE Statement M_DES_SCOPE ELSE M_NEW_SCOPE Statement
{ 
    $$ = new Statement("", $3); destroy_current_scope(); 
};
Statement : WHILE LPAREN Exp RPAREN M_WHILE_ENTER Statement          { $$ = new Statement("", $3); destroy_current_scope(); loop_exited(); };
Statement : BREAK SC                                                 { $$ = new Statement(Break_Cont::BREAK); };
Statement : CONTINUE SC                                              { $$ = new Statement(Break_Cont::CONTINUE); };
Call : ID LPAREN ExpList RPAREN                                      { $$ = new Call($1, $3); };
Call : ID LPAREN RPAREN                                              { $$ = new Call($1); };
ExpList : Exp                                                        { $$ = new ExpList($1); };
ExpList : Exp COMMA ExpList                                          { $$ = new ExpList($1, $3); };
Type : INT                                                           { $$ = new Type($1); };
Type : BYTE                                                          { $$ = new Type($1); };
Type : BOOL                                                          { $$ = new Type($1); };
TypeAnnotation :                                                     { $$ = new TypeAnnotation(); };
TypeAnnotation : CONST                                               { $$ = new TypeAnnotation($1); };
Exp : LPAREN Exp RPAREN                                              { $$ = new Exp($2); };
Exp : Exp BINADD Exp                                                 { $$ = new Exp($1, OP_TYPE::BINADD, $2); };
Exp : Exp BINMUL Exp                                                 { $$ = new Exp($1, OP_TYPE::BINMUL, $2); };
Exp : ID                                                             { $$ = new Exp($1); };
Exp : Call                                                           { $$ = new Exp($1); };
Exp : NUM                                                            { $$ = new Exp($1, "NUM"); };
Exp : NUM B                                                          { $$ = new Exp($1, "BYTE"); };
Exp : STRING                                                         { $$ = new Exp($1, "STRING"); };
Exp : TRUE                                                           { $$ = new Exp($1, "BOOL"); };
Exp : FALSE                                                          { $$ = new Exp($1, "BOOL"); };
Exp : NOT Exp                                                        { $$ = new Exp(true, $2); };
Exp : Exp AND Exp                                                    { $$ = new Exp(dynamic_cast<Exp*>$1, OP_TYPE::AND, dynamic_cast<Exp*>$2); };
Exp : Exp OR Exp                                                     { $$ = new Exp(dynamic_cast<Exp*>$1, OP_TYPE::OR, dynamic_cast<Exp*>$2); };
Exp : Exp RELATION Exp                                               { $$ = new Exp(dynamic_cast<Exp*>$1, OP_TYPE::RELATION, dynamic_cast<Exp*>$2); };
Exp : Exp EQUALITY Exp                                               { $$ = new Exp(dynamic_cast<Exp*>$1, OP_TYPE::EQUALITY, dynamic_cast<Exp*>$2); };
Exp : LPAREN Type RPAREN Exp                                         { $$ = new Exp(dynamic_cast<Type*>($2), dynamic_cast<Exp*>($4)); };
M_WHILE_ENTER :                                                      { loop_entered(); create_new_scope(); }
M_NEW_SCOPE :                                                        { create_new_scope(); }
M_DES_SCOPE :                                                        { destroy_current_scope(); }
%%

int main() {
    return yyparse();
}

void yyerror(char const* s) {
    errorSyn(yylineno);
}