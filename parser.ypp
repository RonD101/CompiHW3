%{
    #include "SemanticAnalyzer.h"
    #include <iostream>
    using namespace output;
    void yyerror(char const*);
%}

%token    VOID
%token    INT
%token    BYTE
%token    B
%token    BOOL
%token    CONST
%token    TRUE
%token    FALSE
%token    RETURN
%token    WHILE
%token    BREAK
%token    CONTINUE
%token    SC
%token    COMMA
%token    IF
%token    ID
%token    NUM
%token    STRING
%right    ASSIGN
%left     OR
%left     AND
%left     EQUALITY
%nonassoc RELATION
%left     BINADD
%left     BINMUL
%right    NOT
%left     LBRACE
%left     RBRACE
%left     LPAREN
%left     RPAREN
%nonassoc ELSE

%%

Program : Funcs                                                      { $$ = Program(); };
Funcs :                                                              { Funcs funcs; };
Funcs : FuncDecl Funcs                                               {};
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE { FuncDecl decl($1.)};
RetType : Type                                                       {};
RetType : VOID                                                       {};
Formals :                                                            {};
Formals : FormalsList                                                {};
FormalsList : FormalDecl                                             {};
FormalsList : FormalDecl COMMA FormalsList                           { };
FormalDecl : TypeAnnotation Type ID                                  { };
Statements : Statement                                               { };
Statements : Statements Statement                                    { };
Statement : LBRACE Statements RBRACE                                 { };
Statement : TypeAnnotation Type ID SC                                { };
Statement : TypeAnnotation Type ID ASSIGN Exp SC                     { };
Statement : ID ASSIGN Exp SC                                         { $$ = Statement($1, Exp($3)); };
Statement : Call SC                                                  { $$ = Statement(Call($1)); };
Statement : RETURN SC                                                { $$ = Statement(); };
Statement : RETURN Exp SC                                            { $$ = Statement(Exp($2)); };
Statement : IF LPAREN Exp RPAREN Statement                           { $$ = Statement("", Exp($3)); };
Statement : IF LPAREN Exp RPAREN Statement ELSE Statement            { $$ = Statement("", Exp($3)); };
Statement : WHILE LPAREN Exp RPAREN Statement                        { $$ = Statement("", Exp($3)); };
Statement : BREAK SC                                                 { $$ = Statement(Break_Cont::BREAK); };
Statement : CONTINUE SC                                              { $$ = Statement(Break_Cont::CONTINUE); };
Call : ID LPAREN ExpList RPAREN                                      { $$ = Call($1, ExpList($3)); };
Call : ID LPAREN RPAREN                                              { $$ = Call($1); };
ExpList : Exp                                                        { };
ExpList : Exp COMMA ExpList                                          { };
Type : INT                                                           { };
Type : BYTE                                                          { };
Type : BOOL                                                          { };
TypeAnnotation :                                                     { };
TypeAnnotation : CONST                                               { };
Exp : LPAREN Exp RPAREN                                              { $$ = Exp($2); };
Exp : Exp BINADD Exp                                                 { $$ = Exp($1, OP_TYPE::BINADD, $2); };
Exp : Exp BINMUL Exp                                                 { $$ = Exp($1, OP_TYPE::BINMUL, $2); };
Exp : ID                                                             { $$ = Exp($1); };
Exp : Call                                                           { $$ = Exp(Call($1)); };
Exp : NUM                                                            { $$ = Exp($1, "NUM"); };
Exp : NUM B                                                          { $$ = Exp($1, "BYTE"); };
Exp : STRING                                                         { $$ = Exp($1, "STRING"); };
Exp : TRUE                                                           { $$ = Exp($1, "BOOL"); };
Exp : FALSE                                                          { $$ = Exp($1, "BOOL"); };
Exp : NOT Exp                                                        { $$ = Exp(true, $2); };
Exp : Exp AND Exp                                                    { $$ = Exp($1, OP_TYPE::AND, $2); };
Exp : Exp OR Exp                                                     { $$ = Exp($1, OP_TYPE::OR, $2); };
Exp : Exp RELATION Exp                                               { $$ = Exp($1, OP_TYPE::RELATION, $2); };
Exp : Exp EQUALITY Exp                                               { $$ = Exp($1, OP_TYPE::EQUALITY, $2); };
Exp : LPAREN Type RPAREN Exp                                         {  };

%%

int main() {
    return yyparse();
}

void yyerror(char const* s) {
    errorSyn(yylineno);
}